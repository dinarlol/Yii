<?php/** * Controller is the customized base controller class. * All controller classes for this application should extend from this base class. */class Controller extends CController {    public $menu = array();    /**     * @var array the breadcrumbs of the current page. The value of this property will     * be assigned to {@link CBreadcrumbs::links}. Please refer to {@link CBreadcrumbs::links}     * for more details on how to specify this property.     */    public $breadcrumbs = array();    public static $admin = 'admin';    public static $member = 'member';    const MEMBER = 'member';    const ADMIN = 'admin';    public function actionError() {        if ($error = Yii::app()->errorHandler->error) {            if (Yii::app()->request->isAjaxRequest) {                echo $error['message'];            } else                $this->render('error', $error);        }    }    protected function chatImage($type = 'chat') {        $chat_model = Transaction . ucfirst($type);        $chat_model::model()->findByPk($_POST['id']);        echo CHtml::image("data:" . $chat_model->file_type . ";base64," . base64_encode($chat_model->file), $chat_model->file_name, array('class' => 'img-responsive'));        exit;    }        protected function settleEscrow($escrow,$user,$transaction,$type='buying',$commissioned=true){                        $escrow->confirm = 1;                $escrow->save();                $wallet_balance = new WalletBalance();                if($commissioned){                $commission = $transaction->btc / 100;                $commission_deposit = new CommissionDeposits();                $commission_deposit->btc = $commission;                $commission_deposit->transaction_hash = 'test_hash';                $commission_deposit->input_transaction_hash = 'input transaction hash';                $commission_deposit->escrow_id = $escrow->id;                $commission_deposit->save();                }                else{                    $commission = 0;                }                $btc = $transaction->btc - $commission;                $wallet_balance->btc_in = $btc;                                $wallet_balance->wallet_id = $user->wallet->id;                $balance = UtilityManager::getWalletBalance($wallet_balance->wallet_id);                $wallet_balance->btc = $balance + $btc;                $wallet_balance->type = $type;                $wallet_balance->type_id = $transaction->id;                $wallet_balance->save();                if($commissioned){                    $transaction->trans_status = TransactionStatus::getTransStatus('closed');                }                else{                    $transaction->trans_status = TransactionStatus::getTransStatus('canceled');                }                $transaction->save();                  }            protected function sendDisputeNotification($dispute){                if($dispute->won){            // dispute is won by the user started dispute process            $subject_won = 'Congratulations you won the dispute';        }        else{            $subject_lost = 'Sorry you lost the dispute';        }                            }    protected function sendEscrowNotification($escrow) {        $subject = 'Escrow has been initiated for your trade';        // owner is buying from a trade        if ($escrow->user_id == $escrow->transaction->users_id) {            $trade_link = CHtml::link(CHtml::encode('Trade'), array('trade/buy/' . $escrow->transaction->trade->id), array("class" => "btn-link"));            $client_link = CHtml::link($escrow->transaction->trade->users->username, array('trader/profile/' . $escrow->transaction->trade->users->username), array("class" => "primary-link"));            $email = $escrow->transaction->users->email;            $message_body = $this->renderInternal('protected/views/mail/notifications/escrowInitiated.php', array('trade_link' => $trade_link, 'client_link' => $client_link), true);            $fullname = $escrow->transaction->trade->users->username;        }        // owner is selling and doing a trade        else {            $trade_link = CHtml::link(CHtml::encode('Trade'), array('trade/sell/' . $escrow->transaction->trade->id), array("class" => "btn-link"));            $client_link = CHtml::link($escrow->transaction->users->username, array('trader/profile/' . $escrow->transaction->users->username), array("class" => "primary-link"));            $email = $escrow->transaction->trade->users->email;            $message_body = $this->renderInternal('protected/views/mail/notifications/escrowInitiated.php', array('trade_link' => $trade_link, 'client_link' => $client_link), true);            $fullname = $escrow->transaction->users->username;        }        UtilityManager::sendEmail($email, $fullname, $subject, $message_body);    }    public function beforeAction($action) {        parent::beforeAction($action);        if (!Yii::app()->user->isGuest && Yii::app()->user->isTwoFactorEnabled() && !Yii::app()->user->isTwoFactorVerify()) {            $this->redirect("/twoFactorAuthentication/verify");        }else if($this->action->id == 'signout'){            return true;        } else if (!Yii::app()->user->isGuest) {            if (Yii::app()->user->isBan()) {               $this->redirect("/trader/signout");             }            $user = Users::model()->findByPk(Yii::app()->user->getId());            $user->scenario = 'activity';            $user->last_active = UtilityManager::getSqlCurrentDate();            $user->update();        }        return TRUE;    }    public function sendVerification($users_id, $verification_type = 'email', $params = array()) {        if ($verification_type == 'realname') {            $verification = new RealnameUsers();            $verification->users_id = $users_id;            $verification->number = UtilityManager::rand_int();            $verification->realname_users_id = $params['users_id'];            $verification->save();            $model = $verification->users;            $model1 = $verification->realnameUsers;            $text = $this->renderInternal('protected/views/mail/notifications/realnameVerification.php', array('id' => $verification->id, 'code' => $verification->number, 'username' => $model1->username, "full_name" => $model1->full_name), true);            UtilityManager::sendEmail($model->email, $model->username, 'Real Name Verification required', $text);            return;        }        $verification = new Verification();        $verification->users_id = $users_id;        $verification->verification_type_id = VerificationType::getVerificationTypeId($verification_type);        $verification->number = UtilityManager::rand_int();        $verification->save();        $model = $verification->users;        if ($verification_type == 'email') {            $text = $this->renderInternal('protected/views/mail/notifications/mailVerification.php', array('id' => $verification->id, 'code' => $verification->number, 'username' => $model->username, "email" => $model->email), true);            UtilityManager::sendEmail($model->email, $model->username, 'Welcome to CheaperBitcoins.com', $text);        } else if ($verification_type == 'sms') {            $text = "Code: " . $verification->number;            UtilityManager::sendSms($model->phone, $text);        }    }}